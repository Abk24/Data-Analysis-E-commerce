--1. Calculate the number of orders per month in 2018.
select DATEPART(month, order_purchase_timestamp) as month, 
count(order_id) as orders
from orders
where DATEPART(YEAR , order_purchase_timestamp) =2018
group by DATEPART(month , order_purchase_timestamp)
order by DATEPART(month , order_purchase_timestamp)


--2. Find the average number of products per order, grouped by customer city.
with cte as(
select  ot.order_id, o.customer_id, COUNT(ot.product_id) as quantity from order_items ot
join orders o on ot.order_id=o.order_id
group by ot.order_id,o.customer_id
)
select c.customer_city, round(avg(cte.quantity*1.0),2) from customers c 
join cte  on c.customer_id=cte.customer_id
group by c.customer_city;


--3. Calculate the percentage of total revenue contributed by each product category.

select p.product_category,
round(sum(py.payment_value)/(select SUM(payment_value) from payments)*100 ,2) as revenue from payments py
join order_items ot on py.order_id=ot.order_id
join products p on p.product_id=ot.product_id
group by p.product_category
order by revenue desc


--4. Identify the correlation between product price and the number of times a product has been purchased.
with cte as(
select p.product_category, cast(count(ot.order_id)as bigint) as num_of_ords, round(avg(ot.price),2) as prices from order_items ot 
join products p on p.product_id=ot.product_id
group by p.product_category
),final as(
select 
count(*) as n,
sum(num_of_ords) as x,
sum(prices) as y,
sum(num_of_ords*prices) as xy,
sum(num_of_ords*num_of_ords) as x2,
sum(prices*prices) as y2
from cte
)
select (n*xy-x*y)/SQRT((n*x2-(x*x))*(n*y2-(y*y)))  as correlation from final


--5. Calculate the total revenue generated by each seller, and rank them by revenue.

select ot.seller_id, round(sum(py.payment_value),2) as revenue ,
rank() over(order by sum(py.payment_value) desc) as rnk
from order_items  ot
join payments py on ot.order_id=py.order_id
group by ot.seller_id































